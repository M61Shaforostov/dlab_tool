#!/bin/bash
clear
core_directory="$(dirname "$(readlink -f "$0")")"
echo "[*]Look for updates..."
git --git-dir $core_directory/.git pull
clear
number_of_nodes=2
rpc_port=923
port=933


ports_to_close=()
trap clear_up INT

function logo {
$core_directory/logo.sh
}

function clear_up {
printf "\n"
for port in "${ports_to_close[@]}"
do
	printf "[*]Found open port $port, closing..."
	sleep 2
	fuser -k "$port/tcp" > /dev/null 2>&1
	printf "Success!\n"
done
exit
}

function main_menu {
printf "1.Bitcoin\n2.Ethereum\n3.Monero\n4.EOS\n"
printf "Enter the number and confirm: "
}

function bitcoin_menu {
printf "1.Start multiple nodes on the local machine\n"
printf "Enter the number and confirm: "
}

function ethereum_menu {
printf "1.Start multiple nodes on the local machine\n"
printf "Enter the number and confirm: "
}

function eos_menu {
printf "1.Setup nodeos and keosd containers\n"
printf "Enter the number and confirm: "
}

#tab1_name tab1_command tab2_name tab2_command
function open_terminal {
if [[ ! -z "$3" ]];then
	xfce4-terminal -T $1 -e "$2" -H --tab -T $3 -e "$4" -H  
else
	xfce4-terminal -T $1 -e "$2" -H
fi
}
logo
main_menu
read currency
if [ "$currency" == "1" ]; then
	if [ -d "$core_directory/bitcoin/node0" ]; then
		rm -r $core_directory/bitcoin/node*
	fi
	clear
	logo
	bitcoin_menu
	read bitcoin_ch
	
	if [ "$bitcoin_ch" == "1" ]; then
	for (( i=0; i<$number_of_nodes; i++ ))
	do
		mkdir "$core_directory/bitcoin/node$i"
		touch "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo [regtest] >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo regtest=1 >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo rpcuser="student$i" >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo rpcpassword="rpc" >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo port="$port$i" >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		echo rpcport="$rpc_port$i" >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		for (( j=0; j<$number_of_nodes; j++ ))
		do
			echo addnode=127.0.0.1:"$port$j" >> "$core_directory/bitcoin/node$i/bitcoin.conf"
		done
		open_terminal "node_console$i" "$core_directory/bitcoin/bitcoind -regtest -datadir=$core_directory/bitcoin/node$i/" "cli-console" "$core_directory/bitcoin/bitcoin-cli-layer $core_directory $core_directory/bitcoin/node$i/" &
    		ports_to_close+=( "$port$i" )
		ports_to_close+=( "$rpc_port$i" )
	done                
        while true; do
            clear
	    logo
            printf "1.Add new node\n"
            read bitcoin_sub_ch
            if [ "$bitcoin_sub_ch"="1" ]; then
                mkdir "$core_directory/bitcoin/node"$(($number_of_nodes))
                touch "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo [regtest] >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo regtest=1 >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo rpcuser="student$(($number_of_nodes))" >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo rpcpassword="rpc" >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo port="$port$(($number_of_nodes))" >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
		        echo rpcport="$rpc_port$(($number_of_nodes))" >> "$core_directory/bitcoin/node$(($number_of_nodes))/bitcoin.conf"
                	number_of_nodes=$(($number_of_nodes + 1))
                	for (( j=0; j<$number_of_nodes; j++ ))
		        do
			        echo addnode=127.0.0.1:"$port$j" >> "$core_directory/bitcoin/node$(($number_of_nodes - 1))/bitcoin.conf"
		        done
		        open_terminal "node_console$(($number_of_nodes - 1))" "$core_directory/bitcoin/bitcoind -regtest -datadir=$core_directory/bitcoin/node$(($number_of_nodes - 1))/" "cli-console" "$core_directory/bitcoin/bitcoin-cli-layer $core_directory $core_directory/bitcoin/node$(($number_of_nodes - 1))/" &
            		ports_to_close+=( "$port$(($number_of_nodes - 1))" )
	    		ports_to_close+=( "$rpc_port$(($number_of_nodes - 1))" )
	       fi
        done
   fi
fi
if [ "$currency" == "2" ]; then
	if [ -d "$core_directory/ethereum/node0" ]; then
                rm -r $core_directory/ethereum/node*
        fi
	clear
	logo
	ethereum_menu
	read ethereum_ch

	if [ "$ethereum_ch" == "1" ]; then
	for (( i=0; i<$number_of_nodes; i++ ))
	do
		mkdir "$core_directory/ethereum/node$i"
		$core_directory/ethereum/geth --datadir $core_directory/ethereum/node$i/ init $core_directory/ethereum/GenesisBlock.json
		start_command="$core_directory/ethereum/geth --identity node$i --datadir $core_directory/ethereum/node$i/ --networkid 2019 --port $port$i --rpc --rpcport $rpc_port$i console"
		open_terminal "node_console" "$start_command" &
		ports_to_close+=( "$port$i" )
		port_to_close+=( "$rpc_port$i" )		 
	done
	while true; do
	clear
	logo
	printf "1.Add new node\n"
	read ethereum_sub_ch
	mkdir "$core_directory/ethereum/node$number_of_nodes"
                $core_directory/ethereum/geth --datadir $core_directory/ethereum/node$number_of_nodes/ init $core_directory/ethereum/GenesisBlock.json
                start_command="$core_directory/ethereum/geth --identity node$number_of_nodes --datadir $core_directory/ethereum/node$number_of_nodes/ --networkid 2019 --port $port$number_of_nodes --rpc --rpcport $rpc_port$number_of_nodes console"
                open_terminal "node_console" "$start_command" &
                ports_to_close+=( "$port$number_of_nodes" )
                port_to_close+=( "$rpc_port$number_of_nodes" )
		number_of_nodes=$(($number_of_nodes + 1))
	done

   fi
fi
if [ "$currency" == "4" ]; then
	clear
	logo
	eos_menu
	read eos_ch
	if [ "$eos_ch" == "1" ]; then
		$core_directory/eos/setup.sh
	
	fi
fi
